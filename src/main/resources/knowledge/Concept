
JavaSE:	Java Standard Edition，标准版；自JDK1.5开始，从J2SE改名为Java SE;
		是JavaEE的基础，主要包括了Java的基本语法规范，面向对象等内容；
		主要用于桌面应用程序开发。
JavaEE:	Java Enterprise Edition，企业版；JavaEE是J2EE的一个新名称；
		是为开发企业环境下的应用程序提供的一套解决方案，包含的技术如Servlet Jsp等；
		主要用于Web应用程序开发，可以使用一些现有的框架来快速的做企业网站。
JavaME:	Java Micro Edition，微版；
		为移动设备（包括消费类产品、嵌入式设备、高级移动设备等）提供基于java环境的开发与应用平台，包括虚拟机和一系列标准化的Java API。

----------------------------------------------------------------
命名规则&规范：
	规则：1）可以以字母、数字、"_"、"$"组成；
		2）首字符不能为数字；
		3）中文名可以作为变量名，但不提倡使用；
		4）大小写敏感；
		5）不是使用Java保留字，如：int、if、for、break等；

	类命名规范：	首字母大写，如果由多个单词组成，要求每个单词首字母也要大写；
	方法命名规范：	首字母小写，如果由多个单词组成，要求中间的每个单词的首字母大写；
	变量命名规范：	同上；
	包命名规范：	全部字母小写；为保障每个Java包命名的唯一性，又因为互联网上的域名是不会重复的，
				所以一般采用网站的域名作为前缀添加在包名前,格式一般为：com.公司名.项目名.模块名....
	常量命名规范：	全部字母大写，如果由多个单词组成，可以用下划线作为连接，如：DAY_OF_YEAR



数组

方法
----------------------------------------------------------------
按照流是否直接与特定的地方（如磁盘、内存、设备等）相连，分为节点流和处理流

节点流：	低级流，可以从或向一个特定的地方（节点）读写数据

处理流：	高级流，是对一个已存在的流的连接和封装，通过所封装的流的功能调用实现数据读写


递归：
----------------------------------------------------------------
进程：	操作系统中运行的一个任务（一个应用程序运行在一个程序中）。
	是一块包含了某些资源的内存区域。操作系统利用进程把它的工作划分为一些功能单元。进程中所包含的一个或多个执行单元称为线程。
	进程还拥有一个私有的虚拟地址空间，该空间仅能被它所包含的线程访问。线程只能归属于一个进程且它只能访问该进程所拥有的资源。
	当操作系统创建一个进程后，该进程会自动申请一个名为主线程或首要线程的线程。操作系统中有若干个线程在“同时”进行。

线程：	一个线程是进程的顺序执行流。
	同类的多个线程共享一块内存空间和一组系统资源，线程本身有一个供程序执行时的堆栈。
	线程在执行时负荷小，因此，线程也被称为轻负荷进程。一个进程中可以包含多个线程。

并发：	多个线程“同时”运行只是感官上的一种表现。事实上线程是并发运行的，OS将时间划分为很多时间片段（时间片），尽可能均匀分配给每一个线程，
	获取时间片段的线程被CPU运行，而其他线程全部等待。所以微观上的走走停停的，宏观上都在运行。这种现象叫并发，但是不是绝对意义上的“同时发生”。

异步操作：	多线程并发的操作，相当于各干各的

同步操作：	有先后顺序的操作，相当于你干完我再干

线程池：	首先创建一些线程，它们的集合称为线程池，当服务器接受到一个客户请求后，
		就从线程池中取出一个空闲的线程为之服务，服务完后不关闭该线程，而是将该线程还回到线程池中；
		在线程池的编辑模式下，任务是提交给整个线程池，线程池就在内部找有无空闲的线程，再把任务交给它；
		一个程序中若创建大量线程，并在任务结束后销毁，会给系统带来过度资源消耗，以及过度切换线程的危险，
		从而可能导致系统崩溃，线程池就可以解决这个问题。

----------------------------------------------------------------
数据库：	按照数据结构来组织、存储和管理数据的仓库

数据库管系统：管理数据库的软件

关系型数据库：描述两个元素间的关联或对应关系，使用关系模型把数据组织到二维数据表中

SQL:	结构化查询语言，是在关系数据库上执行数据操作、检索及维护所使用的标准语言，可以用来查询数据，操纵数据，定义数据，控制数据

----------------------------------------------------------------
JDBC:	Java访问数据库的解决方案
		希望用相同的方式访问不同的数据库，以实现与具体数据库无关的Java操作界面
		定义一套标准接口，即访问数据库的通用API，不同的数据库厂商 根据各自数据库的特点去实现这些接口

DAO:	数据访问对象，建立在数据库和业务层之间，封装所有对数据库的访问
		目的是把数据访问逻辑和业务逻辑分开

----------------------------------------------------------------
Web三要素：	1.浏览器：下载服务器中的网页(HTML)，然后执行HTML显示出内容
			2.服务器：接受浏览器的请求，发送相应的页面到浏览器
			3.HTTP协议：浏览器与服务器的通讯协议

HTML:	Hypertext Markup Language,超文本标记语言，一种纯文本类型的语言
		用来设计网页的标记语言
		用该语言编写的文件，以.html或.htm为后缀
		由浏览器解释执行
		HTML页面上，可以嵌套用脚本语言编写的程序段，如：JavaScript

表单：	用于显示、收集信息，并提交信息到服务器

----------------------------------------------------------------
JavaScript:	属于松散类型的程序语言，变量在声明时不需要指定数据类型，变量所引用的数据有类型
			是嵌入HTML在浏览器中的脚本语言，具有与Java与C语言类似的语法；
			一种网页编程技术，用来向HTML页面 添加交互行为；
			直接嵌入HTML页面；
			有浏览器解释执行代码，不进行预编译。

JS特点：	1）可以使用任何文本编译工具编写
		2）有浏览器内置的JavaScript引擎执行代码
			解释执行：事先不编译，逐行执行
			基于对象：内置大量现成对象
		3）适宜：	客户端数据计算
				客户端表单合法性验证
				浏览器事件的触发
				网页特性显示效果制作
				服务器的异步数据提交

BOM：浏览器对象模型，用来访问和操纵浏览器窗口，是JavaScript有能力与浏览器“对话”

DOM：文档对象模型，用来操作文档
	定义了访问和操作HTML文档的标准方法
	应用程序通过 对DOM树的操作，来实现对HTML文档数据的操作

----------------------------------------------------------------
jQuery：	一个优秀的JavaScript框架，一个轻量级的JS库
		封装了JS、CSS、DOM，提供了一致的、简洁的API
		兼容CSS3，及各浏览器
		使用户更方便地处理HTML、Event、实现动画效果，并且方便地为网站提供AJAX交互
		使用户的HTML页面保持代和HTML内容分离

----------------------------------------------------------------
Servlet:Sun(Oracle)公司制定的一种用来扩展Web服务器功能的组件规范

组件：	在软件开发行业，符合一定规范，实现部分功能，并且需要部署容器当中才能运行的软件模块

容器：	符合一定规范，提供组件运行环境的一个程序

----------------------------------------------------------------
HTTP：	由w3c（万维网联盟）指定的一种应用层协议，用来定义浏览器与web服务器之间如何通讯以及通信的数据格式
	1)建立连接
	2)打包，发送请求
	3)打包，发送相应
	4)关闭连接
	即一次请求，一次连接。如果要再发送请求，需要跑再次建立新的连接
	优点：web服务器可以利用有限的连接为尽可能多的客户服务

----------------------------------------------------------------
JSP：Sun公司制定的一种服务器端动态页面技术的组件规范。
	JSP是一个以".jsp"为后缀的文件，在该文件中，主要是HTML和少量的Java代码。
	JSP文件会被容器转换成一个Servlet类，然后执行。

----------------------------------------------------------------
Cookie：

Session：

JSTL:

Spring:
	Spring的本质是管理软件中的对象，即创建对象和维护对象之间的关系；

IOC：  DI：

组件扫描：

MVC:

AJAX: 	是一种用来改善用户体验的技术，其本质是利用浏览器提供的一个特殊对象(XMLHttpRequest对象，或者简称为ajax对象)
		向服务器发送异步请求，服务器返回部分数据，浏览器利用这些数据对当前页面做局部更新。整个过程，页面无刷新，不打断用户的操作。
	注：异步请求，指的是当ajax对象发送请求时，浏览器不会销毁当前页面，用户仍然可以对当前页面做其它操作

JSON:	是一种轻量级的数据交换格式。
		1）数据交换：将要交换的数据先转换成一种与平台无关的数据格式（比如xml），然后发送给接收方来处理。
		2）轻量级：JSON相对于xml，文档更小，解析速度更快
----------------------------------------------------------------
高内聚	一个软件模块是由相关性很强的代码组成，只负责一项任务，也就是常说的单一职责原则（SRP-Single Responsibility Principle）
低耦合	让每个模块，尽可能的独立完成某个特定的子功能。模块与模块之间的接口，尽量的少而简单


机器语言	用二进制代码表示的指令集，称机器码（machine code），是电脑的CPU可直接解读的数据。
汇编语言	不同的设备中，汇编语言对应着不同的机器语言指令集，通过汇编过程转换成机器指令，不同平台之间不可直接移植。它通常被应用在底层，硬件操作和高要求的程序优化的场合。驱动程序、嵌入式操作系统和实时运行程序都需要汇编语言。
高级语言
    编译型语言	编译性语言写的程序在被执行之前，需要一个专门的编译过程，把程序编译成为机器语言的文件，比如exe文件，以后要运行的话就不用重新翻译了，直接使用exe文件，因为翻译只做了一次，运行时不需要翻译，所以编译型语言的程序执行效率高。
	解析型语言
	    解析型	不需要编译，在运行程序的时候才翻译，每个语句都是执行的时候才翻译。这样解释性语言每执行一次就需要逐行翻译一次，效率比较低。现代解释性语言通常把源程序编译成中间代码，然后用解释器把中间代码一条条翻译成目标机器代码，一条条执行。
		脚本语言	脚本语言是一种解释性的语言，脚本语言是为了缩短传统的编写-编译-链接-运行（edit-compile-link-run）过程而创建的计算机编程语言。脚本语言一般都 有相应的脚本引擎来解释执行。 他们一般需要解释器才能运行。一般都是以文本形式存在,类似于一种命令。
