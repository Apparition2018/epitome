# user user [group];
# 定义 worker_processes 的 user 和 group，如果省略 group，则 group 名称和 user 名称相同
# context: main
#user  nobody;

# worker_processes number | auto;
# 定义 worker processes 数量，通常设置成 CPU 核心数
# context: main
worker_processes 1;
worker_processes  1;

# error_log file [level]
# 配置错误日志
# context: main, http, mail, stream, server, location
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

# pid file;
# pid 文件，用于存储 process ID
# context: main
#pid        logs/nginx.pid;


# 提供 worker process 相关指令
# context: main
events {
    # worker_connections number;
    # 单个 worker process 的最大连接数
    # context: events
    worker_connections  1024;
}


# 提供 HTTP server 相关指令
# context: main
http {
    include       mime.types;

    # default_type mime-type;
    # 定义相应的默认 MIME 类型
    # context: http, server, location
    default_type  application/octet-stream;

    # log_format name [escape=default|json|none] string ...;
    # 日志格式
    # context: http
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    # access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]];
    # access_log off;
    # 设置日志的路径、格式、配置
    # context: http, server, location, if in location, limit_except
    #access_log  logs/access.log  main;

    # sendfile on | off;
    # 启用或禁用 sendfile()
    # context: http, server, location, if in location
    sendfile        on;

    # tcp_nopush on | off;
    # 启用或禁用 FreeBSD 上的 TCP_NOPUSH 套接字选项或 Linux 上的 TCP_CORK 套接字选项，仅当使用 sendfile() 时才启用
    # context: http, server, location
    #tcp_nopush     on;

    # keepalive_timeout timeout [header_timeout];
    # keep-alive 客户端 timeout
    # context: http, server, location
    #keepalive_timeout  0;
    keepalive_timeout  65;

    # gzip on | off;
    # 启用或禁用响应的 gzip 压缩
    # context: http, server, location, if in location
    #gzip  on;

    # 配置虚拟服务器
    # context: http
    server {
        # 设置 IP 地址和端口，或者服务器将在其上接受请求的 UNIX 域套接字的路径
        # context: server
        listen       80;

        # server_name name ...;
        # 设置虚拟服务器名称
        # context: server
        server_name  localhost;

        # charset charset | off;
        # 将指定的字符集添加到“Content-Type”响应标头字段
        # context: http, server, location, if in location
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        # location [ = | ~ | ~* | ^~ ] uri { ... }
        # location @name { ... }
        # 根据请求 URI 设置配置
        # context: server, location
        location / {
            # root path;
            # 设置请求的根目录
            # context: http, server, location, if in location
            root   html;

            # index file ...;
            # 定义首页
            # context: http, server, location
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    # deny address | CIDR | unix: | all;
        #    # 拒绝访问指定的网络或地址
        #    # context: http, server, location, limit_except
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
