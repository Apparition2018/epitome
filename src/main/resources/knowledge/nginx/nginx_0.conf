# user user [group];
# 定义 worker_processes 的 user 和 group，如果省略 group，则 group 名称和 user 名称相同
# context: main
user nobody nobody;

# worker_processes number | auto;
# 定义 worker processes 数量，通常设置成 CPU 核心数
# context: main
worker_processes 1;

# error_log file [level]
# 配置错误日志
# context: main, http, mail, stream, server, location
error_log logs/error.log error;

# pid file;
# pid 文件，用于存储 process ID
# context: main
pid logs/nginx.pid;

# 提供 worker process 相关指令
# contxt: main
events {
    # worker_connections number;
    # 单个 worker process 的最大连接数
    # context: events
    worker_connections 512;
}

# 提供 HTTP server 相关指令
# contxt: main
http {
    # default_type mime-type;
    # 定义相应的默认 MIME 类型
    # context: http, server, location
    default_type text/plain;

    # access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]];
    # access_log off;
    # 设置日志的路径、格式、配置
    # context: http, server, location, if in location, limit_except
    access_log logs/access.log combined;

    # log_format name [escape=default|json|none] string ...;
    # 日志格式
    # context: http
    log_format combined "...";

    # sendfile on | off;
    # 启用或禁用 sendfile()
    # context: http, server, location, if in location
    sendfile off;
    # tcp_nopush on | off;
    # 启用或禁用 FreeBSD 上的 TCP_NOPUSH 套接字选项或 Linux 上的 TCP_CORK 套接字选项，仅当使用 sendfile() 时才启用
    # context: http, server, location
    tcp_nopush off;

    # keepalive_timeout timeout [header_timeout];
    # keep-alive 客户端 timeout
    # context: http, server, location
    keepalive_timeout 75s;
    # tcp_nodelay on | off;
    # 启用或禁用 TCP_NODELAY，当连接在 keep-alive 状态才启用
    # context: http, server, location
    tcp_nodelay on;

    # 定义一组服务器
    # context: http
    upstream product_server {
        server 192.168.1.11:80  weight=5;
        server 192.168.1.12:80  weight=1;
    }

    upstream admin_server {
        server 192.168.1.14:80;
    }

    upstream finance_server {
        server 192.168.1.15:80;
    }

    # 配置虚拟服务器
    # context: http
    server {
        # 设置 IP 地址和端口，或者服务器将在其上接受请求的 UNIX 域套接字的路径
        # context: server
        listen *:80;

        # server_name name ...;
        # 设置虚拟服务器名称
        # context: server
        server_name "";

        # charset charset | off;
        # 将指定的字符集添加到“Content-Type”响应标头字段
        # charset off;

        # location [ = | ~ | ~* | ^~ ] uri { ... }
        # location @name { ... }
        # 根据请求 URI 设置配置
        # context: server, location
        location / {
            # root path;
            # 设置请求的根目录
            # context: http, server, location, if in location
            root html;
            # index file ...;
            # 定义首页
            # context: http, server, location
            index index.html;

            # proxy_pass URL;
            # 设置代理服务器的协议和地址以及位置应映射到的可选 URI
            # context: location, if in location, limit_except
            proxy_pass http://product_server;

            # client_max_body_size size;
            # 设置客户端请求正文允许的最大大小
            # context: http, server, location
            client_max_body_size 1m;
            # client_body_buffer_size size;
            # 设置读取客户端请求正文的缓冲区大小
            # context: http, server, location
            client_body_buffer_size 8k;
        }

        location /product/{
            proxy_pass http://product_server;
        }
    
        location /admin/ {
            proxy_pass http://admin_server;
        }
        
        location /finance/ {
            proxy_pass http://finance_server;
        }

        location ~ /\.ht {
            # deny address | CIDR | unix: | all;
            # 拒绝访问指定的网络或地址
            # context: http, server, location, limit_except
            deny  all;
        }

        # error_page code ... [=[response]] uri;
        # 定义将为指定错误显示的 URI
        # http, server, location, if in location
        error_page 404             /404.html;
        error_page 500 502 503 504 /50x.html;
    }

    # include file | mask;
    # 将另一个文件或与指定掩码匹配的文件包含到配置中
    # context: main
    include mime.types;
    include vhost/*.conf;
}